#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename logo.png
	lyxscale 40
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
Universit√† di Pisa
\end_layout

\begin_layout Standard
\align center

\size large
DIPARTIMENTO DI INFORMATICA
\end_layout

\begin_layout Standard
\align center
Corso di Laurea in Informatica L31
\begin_inset VSpace 0.8cm
\end_inset


\end_layout

\begin_layout Standard
\align center
TESI DI LAUREA 
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center

\shape smallcaps
\size largest
sistema collaborativo per classroom 
\end_layout

\begin_layout Standard
\align center

\shape smallcaps
\size largest
in html5 & node.js 
\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset VSpace vfill
\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align left
Relatore:
\size small

\begin_inset space \hspace{}
\length 9cm
\end_inset

Candidato:
\end_layout

\begin_layout Standard

\size large
Prof.
 Antonio Cisternino
\begin_inset space \hspace{}
\length 3.7cm
\end_inset

Francesco Crecchi
\end_layout

\begin_layout Standard

\size small
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[4.5cm]{
\backslash
hrulefill}
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\size small
Anno Accademico 2013/2014
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
qui ci va la citazione
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Part*
\begin_inset Newpage newpage
\end_inset

Abstract
\end_layout

\begin_layout Standard
Immagine a new way to teach, in which instead of using whiteboard, paper
 and pens, you just need a tablet.
\end_layout

\begin_layout Standard
Immagine to be a student, and to see the notes taken from teacher appearing
 into your digital paper.
 What you only need to do is to integrate that notes with your considerations:
 no more teachers notes lost, no more time waste copying teachers notes,
 more time to elaborate teacher's explanation and take your notes.
\end_layout

\begin_layout Section*
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Purpose of the internship and problems
\end_layout

\begin_layout Subsection
Purpose of the internship
\end_layout

\begin_layout Standard
The purpose of the internship held, into the CVS Lab at the Computer Science
 Department of the University of Pisa, was to create a software for taking
 notes during lessons, that should give a real motivation to the student
 to stop use the traditional way and use devices such as tablet or phablet.
\end_layout

\begin_layout Subsection
The idea
\end_layout

\begin_layout Standard
In the last years has been registered a progressive school digitization,
 first with the introduction of the PC's, now with the distribution of devices
 such as tablet; this trend is sponsored by big IT partners such as Apple
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.apple.com/education/
\end_layout

\end_inset

, Windows
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.microsoft.com/education/ww/Pages/index.aspx
\end_layout

\end_inset

, etc.
\end_layout

\begin_layout Standard
Tecnically has been, and will be, realized better devices than the olders,
 with more realistic writing applications that simulate in every aspect
 the use of pen and paper but it is undeniable that, by now, those devices
 could't make you feel same sensations, they results a little bit tricky
 and this don't let you use them naturally.
\end_layout

\begin_layout Standard
Whithout considering that the cost of this equipment can not be compared
 with the cost of paper and pen, clearly in favour of the latter; so, the
 question is: 
\begin_inset Quotes eld
\end_inset

what can induce the user to change?
\begin_inset Quotes erd
\end_inset

 .
\end_layout

\begin_layout Standard
The answer is simple: we need to stop emulate paper and pen.
 
\end_layout

\begin_layout Standard
We need to give, to the user, something that the traditional way couldn't
 ever offer, in this case: real-time notes from teacher to the student.
\end_layout

\begin_layout Standard
Imagine to be in a class and both teacher and studets have a tablet, we
 can real-time provide to the student what the professor is writing onto
 his digital pad, let him integrate it with his notes.
\end_layout

\begin_layout Standard
Thus was born the idea of creating a software, henceforth Classpad, to assist
 students in attendance at lessons, allowing them to obtain real-time and
 with no effort what the professor writes and letting them concentrate only
 on listening and on integration of the notes obtained from their personal
 considerations.
\end_layout

\begin_layout Subsection
Problems
\end_layout

\begin_layout Standard
Without the shadow of doubt the first problem encountered stems from the
 fact that we don't absolutely want to discriminate any kind of device regardles
s of the mobile operating system on the device.
 Latterly we wanted to make a software easy to install and use, even by
 non-technical people.
\end_layout

\begin_layout Subsection
Solutions
\end_layout

\begin_layout Standard
So we designed Classpad to be 
\begin_inset Quotes eld
\end_inset

lightweight
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

cross-platform
\begin_inset Quotes erd
\end_inset

.
 To do this we decided to realize Classpad as a webapp
\begin_inset Foot
status open

\begin_layout Plain Layout
Wikipedia Webapp web page: http://en.wikipedia.org/wiki/Web_application
\end_layout

\end_inset

, in fact trasposing the compatibilty problem derived from the OS inhomogeneity,
 to browser compatibility to uniform the behaviour of the app.
 This choice solve the 
\begin_inset Quotes eld
\end_inset

cross-platform
\begin_inset Quotes erd
\end_inset

 feature.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

lightweigth
\begin_inset Quotes erd
\end_inset

 feature was reached with the choice to provide a node package that you
 can install via npm command-line tool.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Tools
\end_layout

\begin_layout Standard
In this section we'll be showed the tool used to realize Classpad.
 In the description of every tool we'll discuss for what purpose and what
 problem does it solve.
\end_layout

\begin_layout Subsection
HTML5 + Javascript
\end_layout

\begin_layout Quote
HyperText Markup Language (HTML) is the main markup language for creating
 web pages and other information that can be displayed in a web browser.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Wikipedia HTML web page: http://en.wikipedia.org/wiki/HTML
\end_layout

\end_inset


\end_layout

\begin_layout Standard
HTML (HyperText Markup Language) is the markup language usually used to
 format hypertextual documents in the World Wide Web such as web pages.
 Generally a web page, to be visible and intelligible in the Web, has to
 be oppurtunally formatted.
 This is the purpose of the HTML.
 
\end_layout

\begin_layout Standard
The HTML isn't a programming language (it doesn't provide the possibility
 to define variables, data structures, functions, control structures), but
 only a markup language that describe the page layout and the graphical
 interface of the content.
\end_layout

\begin_layout Standard
In order to enrich the user expirience it's common practice to extend the
 HTML page with some scripts that, thus animations and 
\end_layout

\begin_layout Standard
functionality, makes the web page dynamical.
 
\end_layout

\begin_layout Standard
The most widely used language to provide this features is Javascript:
\end_layout

\begin_layout Quotation
JavaScript (JS) is an interpreted computer programming language.
 As part of web browsers, implementations allow client-side scripts to interact
 with the user, control the browser, communicate asynchronously, and alter
 the document content that is displayed.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Wikipedia Javascript web page: http://en.wikipedia.org/wiki/JavaScript
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Briefly we'll describe its most relevant characteristics:
\end_layout

\begin_layout Itemize
it's an interpreted language: the code is not compiled, but interpreted
 (in client-side Javascript, the interpreter is included in the browser
 we're using).
\end_layout

\begin_layout Itemize
the synthax is close by C, C++ and Java synthax.
\end_layout

\begin_layout Itemize
it defines the typical functionality of the high-level programming language
 (controls structures, cicles,etc..) and permits the use of the object oriented
 paradigm.
\end_layout

\begin_layout Itemize
it's a weakly type language.
\end_layout

\begin_layout Itemize
t's a weakly object oriented language.
\end_layout

\begin_layout Standard
In our case, in order to provide a webapp, we needed to make a webpage,
 so we used HTML5 to define the pages layout and, in particular, we used
 some features of the new HTML standard like Websockets and Canvases.
 We used the HTML5 Canvas as our digital paper and HTML5 Websockets for
 communications between browsers and Javascript as the programming language
 to provide the functionality that every user expects from that type of
 application.
\end_layout

\begin_layout Subsection
GestIT
\end_layout

\begin_layout Standard
GestIT
\begin_inset Foot
status open

\begin_layout Plain Layout
GestIT web page: http://gestit.github.io/GestIT
\end_layout

\end_inset

 is a library for managing and recognition of gesture, it has been implemented
 by a team of graduate students of CVS Lab.
 
\end_layout

\begin_layout Standard
A gesture is a non-verbal or non-vocal type of communication, in which visible
 actions of the body communicate with a particular message, replacing (or
 in conjunction) with speech.
 Gestures includes the movement of hands, face or other parts of the body.
\end_layout

\begin_layout Standard
The base idea of this library is to make possible any gesture recognition
 by developing a model based on the Petri Net, which also permits to create
 them in a compositional and declarative way.
 GestIT team used Non Autonomous Petri Nets in order to describe the recognition
 process, since they ease the description of parallel computations driven
 by external events, such as the reaction of the user interface according
 to the notification coming by the gesture recognition device.
 [inseriere link in bibliografia sulle reti di petri non autonome].
 GestIT has been implemented by Davide Spano in C# language, but during
 the internship it went through some tweaks and it has been re-written and
 expanded in F# language.
 Recently the library has been ported also in Javascript make it usable
 also by web applications.
\end_layout

\begin_layout Standard
We used the Javascript porting of GestIT to provide multitouch functionality
 of the app such as 
\begin_inset Quotes eld
\end_inset

Pinch-To-Zoom
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Pan
\begin_inset Quotes erd
\end_inset

 that are considered by the most a default way to interact with a mobile
 app.
 
\end_layout

\begin_layout Subsection
NodeJS
\end_layout

\begin_layout Quotation
Node.js is a platform built on Chrome's JavaScript runtime
\begin_inset Foot
status open

\begin_layout Plain Layout
Google's V8 web page: https://code.google.com/p/v8/
\end_layout

\end_inset

 for easily building fast, scalable network applications.
 Node.js uses an event-driven, non-blocking I/O model that makes it lightweight
 and efficient, perfect for data-intensive real-time applications that run
 across distributed devices.
\begin_inset Foot
status open

\begin_layout Plain Layout
NodeJS web page: http://nodejs.org/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
NodeJS is a software platform, based on Google's V8 Javascript Engine, that
 permits to create scalable network (especially server-side) applications.
 Node.js utilizes JavaScript as its scripting language, and achieves high
 throughput via non-blocking I/O and a single-threaded event loop.
 As described in [http://sudarmuthu.com/blog/introduction-to-node-js-at-jsfoo],
 the single-threaded event loop force the developer to write asynchronous
 code, in fatct if you a piece of code such as:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var result = db.query("select..");
\end_layout

\begin_layout Plain Layout

// use result
\end_layout

\end_inset


\end_layout

\begin_layout Standard
because of the synchronous callback the main (and the only) thread is waiting
 the results of the blocking I/O database query, with the side effect that,
 i.e, if a new client sent a request to the server it will ignore it because
 it is busy.
 The developer should indeed code the server as:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

db.query("select..", function(result){
\end_layout

\begin_layout Plain Layout

	//use result
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
this asynchronous pattern, allow the program to return to the event loop
 immediately.
 No more unnecessary threads.
\end_layout

\begin_layout Standard
NodeJS contains a library that lets you run a web server without using external
 tools, i.e.
 Apache or Lighttpd, allowing a more in-depht control of the web server
 functionalities.
\end_layout

\begin_layout Standard
As en example here is the code of an 
\begin_inset Quotes eld
\end_inset

hello world
\begin_inset Quotes erd
\end_inset

 HTTP web server build with NodeJS:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var http = require('http');   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

http.createServer(
\end_layout

\begin_layout Plain Layout

  function (request, response) {
\end_layout

\begin_layout Plain Layout

	response.writeHead(200, {'Content-Type': 'text/plain'});
\end_layout

\begin_layout Plain Layout

    	response.end('Hello World
\backslash
n');
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

).listen(8000); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

console.log('Server running at http://localhost:8000/');
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The functionalities of NodeJS can be extended through numerous modules,
 among the most important include those that we have used:
\end_layout

\begin_layout Itemize
Socket.IO
\begin_inset Foot
status open

\begin_layout Plain Layout
Socket.IO web page: http://socket.io/
\end_layout

\end_inset

: Socket.IO aims to make realtime apps possible in every browser and mobile
 device, blurring the differences between the different transport mechanisms.
 We used this module to provide the real-time inter-browser communication,
 especially from Teacher browser to Students browsers.
\end_layout

\begin_layout Itemize
Express
\begin_inset Foot
status open

\begin_layout Plain Layout
Express: http://expressjs.com 
\end_layout

\end_inset

: Express is a minimal and flexible node.js web application framework that
 provides a thin layer of features fundamental to any web application, without
 obscuring features of node.js.
 It's inspired at Sinatra
\begin_inset Foot
status open

\begin_layout Plain Layout
Sinatra web page: http://www.sinatrarb.com
\end_layout

\end_inset

 and it provide a robust set of features for building single and multi-page,
 and hybrid web applications.
 We used Express in our project to make a robust base for the webapp and
 with its middlewares we routed the requests and we extended the Express
 base functionality with other modules like Passport
\begin_inset Foot
status open

\begin_layout Plain Layout
Passport web page: http://passportjs.org
\end_layout

\end_inset

 authentication middleware.
 
\end_layout

\begin_layout Itemize
PDFKit
\begin_inset Foot
status open

\begin_layout Plain Layout
PDFKit web page http://pdfkit.org
\end_layout

\end_inset

: PDFKit is a PDF document-generation library for Node.js that makes it easy
 to create complex, multi-page, printable documents.
 We used it to generate the PDF document from the content of the pad.
\end_layout

\begin_layout Itemize
Connect-mongo
\begin_inset Foot
status open

\begin_layout Plain Layout
Connect-mongo web page: https://npmjs.org/package/connect-mongodb
\end_layout

\end_inset

: Connect-mongodb is a mongoDB session store backed by node-mongodb-native
 
\begin_inset Foot
status open

\begin_layout Plain Layout
node-mongodb-native web page: http://github.com/christkv/node-mongodb-native
\end_layout

\end_inset

.
 The role of this module in our application is simple: connect the express
 frontend with the database backend.
\end_layout

\begin_layout Subsection
MongoDB
\end_layout

\begin_layout Quotation
MongoDB is an open-source document database, and the leading NoSQL database.
\begin_inset Foot
status open

\begin_layout Plain Layout
MongoDB web site: http://www.mongodb.org/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Main advantages of NoSQL are the following aspects: 
\end_layout

\begin_layout Itemize
reading and writing data quickly;
\end_layout

\begin_layout Itemize
supporting mass storage;
\end_layout

\begin_layout Itemize
easy to expand; 
\end_layout

\begin_layout Itemize
low cost.
\end_layout

\begin_layout Standard
As described in [Survey on NoSQL database, http://ieeexplore.ieee.org/xpls/icp.jsp?
arnumber=6106531], according to the CAP theorem, MongoDB is classified into
 the CP
\begin_inset Foot
status open

\begin_layout Plain Layout
Concerned about consistency and partition tolerance(CP): Such a database
 system stores data in the distributed nodes, but also ensure the consistency
 of these data, but support not good enough for the availability.
\end_layout

\end_inset

 type of NoSQL database.
 MongoDB most important features are:
\end_layout

\begin_layout Itemize
Document-Oriented storage: Data in MongoDB has a Ô¨Çexible schema.
 Unlike SQL databases, where you must determine and declare a table‚Äôs schema
 before inserting data, MongoDB‚Äôs collections do not enforce document structure.
 This Ô¨Çexibility facilitates the mapping of documents to an entity or an
 object.
\begin_inset Foot
status open

\begin_layout Plain Layout
MongoDB docs web site:http://docs.mongodb.org/v2.4/MongoDB-data-models-guide.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Auto-Sharding: Scale horizontally without compromising functionality.
\end_layout

\begin_layout Itemize
Support complex data types: MongoDB support bjson data structures to store
 complex data types.
\begin_inset CommandInset label
LatexCommand label
name "MongoDB-JSON-data"

\end_inset


\end_layout

\begin_layout Standard
We used MongoDB database as the backend of our webapp storing into it the
 login sessions of the users and saving the state of the teachers pad to
 allow them to restore the pad version later.
 In particular the MongoDB characteristics
\begin_inset CommandInset ref
LatexCommand vref
reference "MongoDB-JSON-data"

\end_inset

 has allowed us to store JSON format graphics paths string directly into
 db for save and restore capabilities.
\end_layout

\begin_layout Subsection
Paper.js
\end_layout

\begin_layout Standard
Paper.js is 
\begin_inset Quotes eld
\end_inset

The Swiss Army Knife of Vector Graphics Scripting
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Paper.js about web page: http://paperjs.org/about
\end_layout

\end_inset

, it's an open source vector graphics framework that runs on top of the
 HTML5 Canvas.
 Paper.js is based on and largely compatible with Scriptographer
\begin_inset Foot
status open

\begin_layout Plain Layout
Scriptographer web page: http://scriptographer.org
\end_layout

\end_inset

, a scripting environment for Adobe Illustrator with an active community
 of scripters and more than 10 years of development.
\end_layout

\begin_layout Standard
The strenghts of Paper.js are:
\end_layout

\begin_layout Itemize
Construct paths and manipulate their curves and segments in very convenient
 and fine-grained ways.
\end_layout

\begin_layout Itemize
Smoothen curves, and simplify path segments by fitting curves through points.
\end_layout

\begin_layout Itemize
Inspect and manipulate the precise bounding box of any item, supporting
 complicated stroke styles with different stroke ends and miter limits.
\end_layout

\begin_layout Itemize
Paper.js treats Vector Mathematics as a first class citizen by making working
 with vectors and geometries as simple as possible through its core types
 such as Point, Size and Rectangle.
 The manipulation of Point and Size objects is further simplified in PaperScript
, where direct math operations using normal operator syntax are possible
 on such objects as if they were plain numbers.
\end_layout

\begin_layout Itemize
Browser support: Paper.js is aimed at modern browsers with support for the
 Canvas object and EcmaScript 5.
\end_layout

\begin_layout Standard
So, briefly, we used Paper.js to introduce vector graphics into the HTML5
 Canvas, that is well known raster-based.
 Paper.js is used in our project to render the user graphical feedback drawing
 paths on the canvas.
\end_layout

\begin_layout Subsection
Twitter Bootstrap
\end_layout

\begin_layout Standard
The user exprerience (UX) is the most important feature of an app, if the
 user feeling is bad, the user will stop using your app.
 So to fix the screen size device's different layout, you can follow two
 different ways: 
\end_layout

\begin_layout Enumerate
Build a version for each device you want to support.
 This will take forever, because you‚Äôll be building too many versions of
 your application.
 Also, when the next new smartphone arrives (which happens roughly weekly),
 you will be forced to create yet another version.
 In truth you can choose a compromise: classify devices into categories,
 and design the best possible experience for each category.
 Here's a sample classification that nicely spans popular web-capable devices
 that exist today:
\end_layout

\begin_deeper
\begin_layout Itemize
small screens + touch (mostly phones).
\end_layout

\begin_layout Itemize
large screens + touch (mostly tablets).
\end_layout

\begin_layout Itemize
large screens + keyboard/mouse (mostly desktops/laptops).
\end_layout

\end_deeper
\begin_layout Enumerate
Choose a resposive layout.
 Responsive means adaptive; this definition fits perfectly the idea:
\end_layout

\begin_deeper
\begin_layout Quotation
Responsive Web design is the approach that suggests that design and development
 should respond to the user‚Äôs behavior and environment based on screen size,
 platform and orientation.
 The practice consists of a mix of flexible grids and layouts, images and
 an intelligent use of CSS media queries.
 As the user switches from their laptop to iPad, the website should automaticall
y switch to accommodate for resolution, image size and scripting abilities.
 In other words, the website should have the technology to automatically
 respond to the user‚Äôs preferences.
 This would eliminate the need for a different design and development phase
 for each new gadget on the market.
\begin_inset Foot
status open

\begin_layout Plain Layout
http://coding.smashingmagazine.com/2011/01/12/guidelines-for-responsive-web-design
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Our chosen approach was the second, so we bet on the most widely resposive
 design framework used: Twitter Bootstrap.
 Bootstrap is an aggregate of different projects:
\end_layout

\begin_layout Enumerate
Grid System
\begin_inset Foot
status open

\begin_layout Plain Layout
http://960.gs
\end_layout

\end_inset

: The 960 Grid System is an effort to streamline web development workflow
 by providing commonly used dimensions, based on a width of 960 pixels.
 There are two variants: 12 and 16 columns, which can be used separately
 or in tandem.
\end_layout

\begin_layout Enumerate
Less
\begin_inset Foot
status open

\begin_layout Plain Layout
http://lesscss.org
\end_layout

\end_inset

: LESS (Leaner CSS) is a dynamic stylesheet language designed by Alexis
 Sellier; LESS allows variables to be defined.
 Variable assignment is done with a colon (:).
 During translation, the values of the variables are inserted into the output
 CSS document.
 For example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@color: #4D926F;
\end_layout

\begin_layout Plain Layout

#header { color: @color; }
\end_layout

\begin_layout Plain Layout

h2 { color: @color; }
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The above code in LESS would compile to the following CSS code.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#header { color: #4D926F; }
\end_layout

\begin_layout Plain Layout

h2 { color: #4D926F; }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It permits to assing constants to CSS numerous properties using variables.
\end_layout

\end_deeper
\begin_layout Section
Classpad
\end_layout

\begin_layout Standard
Classpad is a collaborative drawing webapp for classrooms, written in HTML5
 and Javascript, based on NodeJS that has the purpose to be the next generation
 way for taking notes during lessons.
 Classpad differs from other collaborative drawing tools on the market because
 of it's target: since other apps provides paritary whiteboard share, our
 software structure follows the master-slave paradigm so we provided two
 type of roles: the teacher and the student.
 
\end_layout

\begin_layout Standard
This type of interaction support naturally the master-slave paradigm where
 the communication flow goes from the master, in our case the teacher, to
 the slaves (the students), in fact what you expect from this type of app
 is that the notes from the master goes to the students tablet and not the
 other way.
 To do this we have provided a login system for the teachers that allows
 them to manage their classes, with operations like create, delete and restore
 previously created lessons.
 No login operations is required by the student that fits perfectly what
 really happens in a classroom: the teacher has to be qualified to teach,
 the student simply take a sit and start taking the lesson.
 So, as student, you only have to select what class you'll take and start
 taking your notes.
\end_layout

\begin_layout Standard
Classpad project structure follows the default structure provided by Express
 Node modules:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ tree -L 1 Classpad
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ app.js 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ auth.js 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ db.js 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ files/ 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ node_modules/ 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ package.json 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ public/ 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ routes/ 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ routes.js 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ sockets.js 
\end_layout

\begin_layout Plain Layout

‚îú‚îÄ‚îÄ svn-commit.tmp 
\end_layout

\begin_layout Plain Layout

‚îî‚îÄ‚îÄ views/ 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The node_modules directory contains the module dependencies required by
 our Node application: those modules are listed into the 
\begin_inset Quotes eld
\end_inset

package.json
\begin_inset Quotes erd
\end_inset

 file.
 The standard Express directory tree is also composed by the public directory,
 which contains the files that we want to expose in the web site such as
 stylesheets and scripts, the routes directory, which is resposible for
 request routing, and the views directory: it contains the pages of the
 website, the interfaces showed to the user.
 
\end_layout

\begin_layout Standard
The most important file inside the Express directory tree is the 
\begin_inset Quotes eld
\end_inset

app.js
\begin_inset Quotes erd
\end_inset

 file, which provide the server functionality.
 It contains the definition and the features provided by the server.
\end_layout

\begin_layout Standard
Our addictional files, such as 
\begin_inset Quotes eld
\end_inset

routes.js
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

socket.js
\begin_inset Quotes erd
\end_inset

 , 
\begin_inset Quotes eld
\end_inset

auth.js
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

db.js
\begin_inset Quotes erd
\end_inset

, are Node modules created with the purpose to permit respectively the request
 routing (in addiction with the default Express routing), the communication
 between master and slaves, the authentication and the storage of data into
 the backend database.
\end_layout

\begin_layout Standard
The combination of express routing feature and the session feature, provided
 by Passport, permits to create routing-per-role easly using middleware
 like:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//MyClasses
\end_layout

\begin_layout Plain Layout

app.get("/myclasses", midLogin, routes.listClasses);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where midLogin middleware looks like:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var midLogin = function(req,res,next){ 
\end_layout

\begin_layout Plain Layout

	//check if the user's credentials are saved in a session
\end_layout

\begin_layout Plain Layout

   if (req.path != "/login" && req.session.passport.user == undefined)
\end_layout

\begin_layout Plain Layout

	res.render('login');
\end_layout

\begin_layout Plain Layout

   else
\end_layout

\begin_layout Plain Layout

      next();
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Practically what it really happens is that when a user request the 
\begin_inset Quotes eld
\end_inset

/myclasses
\begin_inset Quotes erd
\end_inset

 path, the request passses through the midLogin middleware that analyze
 the user session data and choose if he is allowed or not to forward the
 request to the original path.
\end_layout

\begin_layout Standard
To store the users sessions and other data, such as i.e.
 the master pad state, you need a database.
 We choosed a db that is the leading NoSQL database and that works perfectly
 with Express: MongoDB.
 Once configured and booted the database onto the server machine we used
 the 
\begin_inset Quotes eld
\end_inset

connect-mongo
\begin_inset Quotes erd
\end_inset

 module to allow Express to communicate with the database for storage purpose.
 Into the 
\begin_inset Quotes eld
\end_inset

db.js
\begin_inset Quotes erd
\end_inset

 file we defined the backend structure of our app in collections like: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//login table 
\end_layout

\begin_layout Plain Layout

self.userSchema = self.mongoose.Schema({ username:String, password:String });
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case to store the master login credentials.
\end_layout

\begin_layout Standard
Here it is what happens when a user tries to authenticate: first he must
 register himself through the registration form clicking in the 
\begin_inset Quotes eld
\end_inset

Register
\begin_inset Quotes erd
\end_inset

 button into the home screen.
 Once he has completed the form and hit the 
\begin_inset Quotes eld
\end_inset

Register
\begin_inset Quotes erd
\end_inset

 button a new entry is created into the userSchema.
 Lattely when he comes to login,through the 
\begin_inset Quotes eld
\end_inset

Login
\begin_inset Quotes erd
\end_inset

 button on the top of the home page, a login form is provided; once he has
 inserted username and password and clicked on the submit button a POST
 request is sent to the server that uses the functionalities provided by
 the 
\begin_inset Quotes eld
\end_inset

auth.js
\begin_inset Quotes erd
\end_inset

 module to check if there is an entry into the database userSchema, the
 result of this check tell the server wheter or not to authenticate the
 user.
\end_layout

\begin_layout Standard
An important mention needs to be dedicated at the 
\begin_inset Quotes eld
\end_inset

socket.js
\begin_inset Quotes erd
\end_inset

 module: it uses the Socket.io Node module that integrates perfectly with
 Express and that offers a uniform communication base even between newer
 and older browsers.
 In particular we used the 
\begin_inset Quotes eld
\end_inset

session.socket.io
\begin_inset Quotes erd
\end_inset

 modules that allow session based authorization and it's, in our scope,
 most important feature: rooms/channels.
 Since we have, on the same server machine, multiple masters, we must protect
 the communication between teacher and students of a classroom from the
 interference of other master's sessions; with Node this comes easly using
 the Session.socket.io rooms functionality.
 What can you do is have a separate channel for each class.
 We do this in this mode: when a slave want to connect to a class he send
 an 
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset

 message containing the class ID.
 The server receive that message and connect the slave socket to the master's
 socket, like this: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

socket.on('hello',function(id){
\end_layout

\begin_layout Plain Layout

 //..
\end_layout

\begin_layout Plain Layout

 socket.join(id); //joining a room
\end_layout

\begin_layout Plain Layout

 //..
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And this is what happens when the master sync its pad with the slaves pad:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

socket.on('sync', function(data){
\end_layout

\begin_layout Plain Layout

 //..
\end_layout

\begin_layout Plain Layout

 socket.broadcast.to(id).emit('mDraw',{'data': data,'id':id});
\end_layout

\begin_layout Plain Layout

 //..
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Documentation
\end_layout

\begin_layout Standard
Different users, different devices, different screen sizes: 
\begin_inset Quotes eld
\end_inset

Is my device supported?
\begin_inset Quotes erd
\end_inset

.
 We designed Classpad to be adaptive: as a webapp we moved the OS compatibility
 problem to browsers compatibility problem and used a resposive layout library
 to build the interface of our app; so stop worrying about screen compatibility,
 the app adapt its layout to fit your screen size.
 Furthermore because of its nature, you don't need any addictional software,
 it works into the browser that is default installed in every tablet.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Ok, and if I am a teacher? is my privacy guaranteed?
\begin_inset Quotes erd
\end_inset

 Sure, we focused on it during the development of the teacher's features
 of the app: login authentication provides to you the access to your classes
 manage page, in which you can create, delete and manage existing classes
 chosing the visibility level choosign between 
\begin_inset Quotes eld
\end_inset

private
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

public
\begin_inset Quotes erd
\end_inset

.
 If you set your class visibility to 
\begin_inset Quotes eld
\end_inset

public
\begin_inset Quotes erd
\end_inset

 it will be displayed into the home page of the app inside the 
\begin_inset Quotes eld
\end_inset

Classes lists
\begin_inset Quotes erd
\end_inset

, that contains all the available classes that a student can take.
 In every moment you can change the visibility level of your classes this
 allow you, i.e., to previously prepare private lessons and later change their
 visibility into public, when you decide to show them to the students.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Ok i finished the lesson, how i save my work?
\begin_inset Quotes erd
\end_inset

 As a teacher you session is auto-saved meanwhile you make lesson: this
 feature lets you stop worrying about things such 
\begin_inset Quotes eld
\end_inset

What appens if i close my browser?
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

What happens if i drain the tablet battery?
\begin_inset Quotes erd
\end_inset

 You'll not lose anything, all your lessons are stored into the app database;
 this feature allow you to stop and resume lessons from your manage page.
 
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

And if i am a student?
\begin_inset Quotes erd
\end_inset

 Both student and teacher interface contains a 
\begin_inset Quotes eld
\end_inset

Pdf export
\begin_inset Quotes erd
\end_inset

 button that allow you to create a PDF of you lesson pages that you can
 store directly into your device.
\end_layout

\end_body
\end_document
